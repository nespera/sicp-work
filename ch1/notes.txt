Ex 1.5
======
p calls itself, so if normal order evaluation is used, the interpreter will never return.

Ex 1.6
======
This will not terminate as new-if needs to evaluate both branches.

Ex 1.9 
======
First one builds up to (inc (inc (inc (inc 5)))) & then reduces. So it is recursive.
Second one goes to (+ 3 6) and then (+ 2 7) and then (+ 1 8) and finally (+ 0 9) which yields 9. So it is iterative.

Ex 1.10
=======
(A 1 10)
(A 0 (A 1 9)
(* 2 (A 1 9))
(* 2 (* 2 (A 1 8))
....
(* 2 (* 2 .... (A 1 1))
(* 2 (* 2 .... (2))
....
= 2^10 = 1024

(A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 4))
(A 1 16)
= 2^16 = 65536

(A 3 3)
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A 1 (A 2 1))
(A 2 (A 1 2)))
(A 2 4)
= 2^16 = 65536

(f n) calculates 2*n
(g n) calculates 2^n (except when n=0)
(h n) calculates 2^(2^(n-1)) (except when n=0)

Ex 1.15
=======
(sine 12.15)
(p (sine 4.05))
(p (p (sine 1.35)))
(p (p (p (sine 0.45))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine 0.05))))))
(p (p (p (p (p (0.05))))))

So p is applied 5 times
The function takes O(log n) steps and grows in space by the same order.

Ex 1.20
=======
Applicative-Order:
gcd(206,40)
gcd(40,6)
gcd(6,4)
gcd(4,2)
gcd(2,0)
2

Normal-Order:
gcd(206,40)
[0 remainder applied:]
gcd(40, (remainder 206 40))  
[1 remainder applied by if:]
gcd((remainder 206 40), (remainder 40 (remainder 206 40)))
[2 remainders applied by if:]
gcd((remainder 40 (remainder 206 40)), (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
[4 remainders applied by if:]
...Got bored at this point...

Ex 1.22
=======
Size vs Avg Time to Find a Prime
10^6 : 16ms
10^7 : 31ms
10^8 : 109ms
10^9 : 375ms
10^10: 1200ms

Increasing size by 100 increases time by approx 10
So root(n) is a good approximation to time 

Ex 1.29
=======
The simpson method seems to produce a very accurate answer with quite a small number of steps.
